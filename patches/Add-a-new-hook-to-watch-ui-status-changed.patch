From 773c8d09abb64196211e5629fa86fc52d1557749 Mon Sep 17 00:00:00 2001
From: Takuro Ashie <ashie@clear-code.com>
Date: Fri, 24 Jun 2016 12:48:22 +0900
Subject: [PATCH] [core] Add a new hook to watch ui status changed

---
 src/lib/fcitx/hook-internal.h     |  8 ++++++++
 src/lib/fcitx/hook.c              | 12 ++++++++++++
 src/lib/fcitx/hook.h              | 25 ++++++++++++++++++++++++
 src/lib/fcitx/instance-internal.h |  1 +
 src/lib/fcitx/ui.c                | 40 ++++++++++++++++++++++-----------------
 5 files changed, 69 insertions(+), 17 deletions(-)

diff --git a/src/lib/fcitx/hook-internal.h b/src/lib/fcitx/hook-internal.h
index 03820b9..25e05a0 100644
--- a/src/lib/fcitx/hook-internal.h
+++ b/src/lib/fcitx/hook-internal.h
@@ -137,4 +137,12 @@ void FcitxInstanceProcessICStateChangedHook(struct _FcitxInstance* instance, str
 
 void FcitxInstanceProcessIMChangedHook(struct _FcitxInstance* instance);
 
+/**
+ * process ui status changed
+ *
+ * @param instance fcitx instance
+ * @return void
+ **/
+void FcitxInstanceProcessUIStatusChangedHook(struct _FcitxInstance* instance, const char *statusName);
+
 // kate: indent-mode cstyle; space-indent on; indent-width 0;
diff --git a/src/lib/fcitx/hook.c b/src/lib/fcitx/hook.c
index b310e89..3f44cf7 100644
--- a/src/lib/fcitx/hook.c
+++ b/src/lib/fcitx/hook.c
@@ -43,6 +43,7 @@ typedef struct _HookStack {
         FcitxIMEventHook eventhook;
         FcitxICEventHook ichook;
         FcitxHotkeyHook hotkey;
+        FcitxUIStatusHook uistatushook;
     };
     /**
      * stack next
@@ -90,6 +91,7 @@ DEFINE_HOOK(IMChangedHook, FcitxIMEventHook, eventhook);
 DEFINE_HOOK(UpdateCandidateWordHook, FcitxIMEventHook, eventhook);
 DEFINE_HOOK(UpdateIMListHook, FcitxIMEventHook, eventhook);
 DEFINE_HOOK(ICStateChangedHook, FcitxICEventHook, ichook);
+DEFINE_HOOK(UIStatusChangedHook, FcitxUIStatusHook, uistatushook);
 
 void FcitxInstanceProcessPreInputFilter(FcitxInstance* instance, FcitxKeySym sym, unsigned int state, INPUT_RETURN_VALUE* retval)
 {
@@ -296,6 +298,16 @@ INPUT_RETURN_VALUE FcitxInstanceProcessHotkey(FcitxInstance* instance, FcitxKeyS
     return out;
 }
 
+void FcitxInstanceProcessUIStatusChangedHook(FcitxInstance* instance, const char *statusName)
+{
+    HookStack* stack = GetUIStatusChangedHook(instance);
+    stack = stack->next;
+    while (stack) {
+        stack->uistatushook.func(stack->uistatushook.arg, statusName);
+        stack = stack->next;
+    }
+}
+
 FCITX_EXPORT_API
 boolean FcitxDummyReleaseInputHook(void* arg, FcitxKeySym sym, unsigned int state, INPUT_RETURN_VALUE* retval)
 {
diff --git a/src/lib/fcitx/hook.h b/src/lib/fcitx/hook.h
index 126d541..e9b59b1 100644
--- a/src/lib/fcitx/hook.h
+++ b/src/lib/fcitx/hook.h
@@ -63,6 +63,11 @@ extern "C" {
     typedef void (*FcitxICEventHookFunc)(void* arg, struct _FcitxInputContext* ic);
 
     /**
+     * ui status changed hook function
+     **/
+    typedef void (*FcitxUIStatusHookFunc)(void* arg, const char *statusName);
+
+    /**
      * Hotkey process struct
      **/
     typedef struct _FcitxHotkeyHook {
@@ -125,6 +130,15 @@ extern "C" {
         FcitxICEventHookFunc func; /**< callback function */
         void *arg; /**< argument for callback */
     } FcitxICEventHook;
+
+    /**
+     * UI Event hook
+     **/
+    typedef struct _FcitxUIStatusHook {
+        FcitxUIStatusHookFunc func; /**< callback function */
+        void *arg; /**< argument for callback */
+    } FcitxUIStatusHook;
+
     /**
      * register pre input filter
      *
@@ -284,6 +298,17 @@ extern "C" {
      **/
     void FcitxInstanceRegisterICStateChangedHook(struct _FcitxInstance* instance, FcitxICEventHook hook);
 
+    /**
+     * register a hook for watching when ui status changed
+     *
+     * @param instance fcitx instance
+     * @param hook new hook
+     * @return void
+     *
+     * @since TBD
+     **/
+    void FcitxInstanceRegisterUIStatusChangedHook(struct _FcitxInstance* instance, FcitxUIStatusHook hook);
+
     boolean FcitxDummyReleaseInputHook(void* arg, FcitxKeySym sym,
                                         unsigned int state,
                                         INPUT_RETURN_VALUE *retval);
diff --git a/src/lib/fcitx/instance-internal.h b/src/lib/fcitx/instance-internal.h
index e7381f0..b0f4fee 100644
--- a/src/lib/fcitx/instance-internal.h
+++ b/src/lib/fcitx/instance-internal.h
@@ -117,6 +117,7 @@ struct _FcitxInstance {
     struct _HookStack* hookCommitFilter;
     struct _HookStack* hookICStateChangedHook;
     struct _HookStack* hookIMChangedHook;
+    struct _HookStack* hookUIStatusChangedHook;
 
     uint32_t eventflag;
 
diff --git a/src/lib/fcitx/ui.c b/src/lib/fcitx/ui.c
index 8ed4dc5..007ee77 100644
--- a/src/lib/fcitx/ui.c
+++ b/src/lib/fcitx/ui.c
@@ -402,22 +402,33 @@ FcitxUIComplexStatus *FcitxUIGetComplexStatusByName(FcitxInstance* instance, con
     return compstatus;
 }
 
+static inline void FcitxUICallUpdateStatus(FcitxInstance* instance, FcitxUIStatus* status)
+{
+    if (UI_FUNC_IS_VALID(UpdateStatus))
+        instance->ui->ui->UpdateStatus(instance->ui->addonInstance, status);
+    FcitxInstanceProcessUIStatusChangedHook(instance, status->name);
+}
+
+static inline void FcitxUICallUpdateComplexStatus(FcitxInstance* instance, FcitxUIComplexStatus *status)
+{
+    if (UI_FUNC_IS_VALID(UpdateComplexStatus))
+        instance->ui->ui->UpdateComplexStatus(instance->ui->addonInstance, status);
+    FcitxInstanceProcessUIStatusChangedHook(instance, status->name);
+}
+
 FCITX_EXPORT_API
 void FcitxUIRefreshStatus(FcitxInstance* instance, const char* name)
 {
     FcitxUIStatus *status = FcitxUIGetStatusByName(instance, name);
 
     if (status != NULL) {
-        if (UI_FUNC_IS_VALID(UpdateStatus))
-            instance->ui->ui->UpdateStatus(instance->ui->addonInstance , status);
+        FcitxUICallUpdateStatus(instance, status);
     }
     else {
         FcitxUIComplexStatus *compstatus = FcitxUIGetComplexStatusByName(instance, name);
         if (!compstatus)
             return;
-
-        if (UI_FUNC_IS_VALID(UpdateComplexStatus))
-            instance->ui->ui->UpdateComplexStatus(instance->ui->addonInstance , compstatus);
+        FcitxUICallUpdateComplexStatus(instance, compstatus);
     }
 }
 
@@ -432,8 +443,7 @@ void FcitxUIUpdateStatus(FcitxInstance* instance, const char* name)
         if (status->toggleStatus)
             status->toggleStatus(status->arg);
 
-        if (UI_FUNC_IS_VALID(UpdateStatus))
-            instance->ui->ui->UpdateStatus(instance->ui->addonInstance , status);
+        FcitxUICallUpdateStatus(instance, status);
     }
     else {
         FcitxUIComplexStatus *compstatus = FcitxUIGetComplexStatusByName(instance, name);
@@ -442,8 +452,8 @@ void FcitxUIUpdateStatus(FcitxInstance* instance, const char* name)
 
         if (compstatus->toggleStatus)
             compstatus->toggleStatus(compstatus->arg);
-        if (UI_FUNC_IS_VALID(UpdateComplexStatus))
-            instance->ui->ui->UpdateComplexStatus(instance->ui->addonInstance , compstatus);
+
+        FcitxUICallUpdateComplexStatus(instance, compstatus);
     }
 }
 
@@ -476,12 +486,10 @@ void FcitxUISetStatusString(FcitxInstance* instance, const char* name, const cha
     *pLong = strdup(longDesc);
 
     if (status){
-        if (UI_FUNC_IS_VALID(UpdateStatus))
-            instance->ui->ui->UpdateStatus(instance->ui->addonInstance, status);
+        FcitxUICallUpdateStatus(instance, status);
     }
     else if (compstatus) {
-        if (UI_FUNC_IS_VALID(UpdateComplexStatus))
-            instance->ui->ui->UpdateComplexStatus(instance->ui->addonInstance, compstatus);
+        FcitxUICallUpdateComplexStatus(instance, compstatus);
     }
 }
 
@@ -497,8 +505,7 @@ void FcitxUISetStatusVisable(FcitxInstance* instance, const char* name, boolean
         if (compstatus->visible != visible) {
             compstatus->visible = visible;
 
-            if (UI_FUNC_IS_VALID(UpdateComplexStatus))
-                instance->ui->ui->UpdateComplexStatus(instance->ui->addonInstance, compstatus);
+            FcitxUICallUpdateComplexStatus(instance, compstatus);
         }
         return;
     }
@@ -506,8 +513,7 @@ void FcitxUISetStatusVisable(FcitxInstance* instance, const char* name, boolean
     if (status->visible != visible) {
         status->visible = visible;
 
-        if (UI_FUNC_IS_VALID(UpdateStatus))
-            instance->ui->ui->UpdateStatus(instance->ui->addonInstance, status);
+        FcitxUICallUpdateStatus(instance, status);
     }
 }
 
-- 
2.7.4

